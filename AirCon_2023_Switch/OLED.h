/// ref : https://samstory.coolschool.co.kr/zone/story/codingarray/streams/45621
////  https://blog.naver.com/PostView.nhn?blogId=emperonics&logNo=222081054316

#ifndef OLED_h
#define OLED_h
#include "Arduino.h"

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

const int SCREEN_WIDTH  = 128; // OLED display width, in pixels
const int SCREEN_HEIGHT = 32; // OLED display height, in pixels

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16
static const unsigned char PROGMEM logo_bmp[] =
{ 0b00000000, 0b11000000,
  0b00000001, 0b11000000,
  0b00000001, 0b11000000,
  0b00000011, 0b11100000,
  0b11110011, 0b11100000,
  0b11111110, 0b11111000,
  0b01111110, 0b11111111,
  0b00110011, 0b10011111,
  0b00011111, 0b11111100,
  0b00001101, 0b01110000,
  0b00011011, 0b10100000,
  0b00111111, 0b11100000,
  0b00111111, 0b11110000,
  0b01111100, 0b11110000,
  0b01110000, 0b01110000,
  0b00000000, 0b00110000 };

// 'maple', 128x64px : http://javl.github.io/image2cpp/
static const unsigned char PROGMEM logo_maple[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xf1, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x40, 0xff, 0xff, 
0xc0, 0xff, 0xfe, 0xff, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xfe, 0x1f, 0x00, 0x7f, 0xff, 0xc0, 0xff, 
0xfe, 0x0f, 0x00, 0x3f, 0xff, 0xc0, 0xff, 0xfe, 0x06, 0x00, 0x7f, 0xff, 0xc0, 0xff, 0xfc, 0x02, 
0x00, 0x7f, 0xff, 0xc0, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xfe, 0x00, 0x00, 0xff, 
0xff, 0xc0, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xc0, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xc0, 
0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xc0, 0xff, 0xe0, 
0x00, 0x00, 0x03, 0xff, 0xc0, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0xff, 0xf8, 0x00, 0x00, 
0x07, 0xff, 0xc0, 0xff, 0xfe, 0x00, 0x00, 0x07, 0xff, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 
0xc0, 0xff, 0xff, 0xce, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xde, 0x08, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x40, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xf8, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0 };


class OLED {
  public:
  //Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

  public:
  OLED() {
  }

  void Init() {
    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
      Serial.println(F("SSD1306 allocation failed"));
      for(;;); // Don't proceed, loop forever
    }

    // Show initial display buffer contents on the screen --
    // the library initializes this with an Adafruit splash screen.
    display.display();
    delay(2000); // Pause for 2 seconds

    // Clear the buffer
    display.clearDisplay();

    // Draw a single pixel in white
    display.drawPixel(10, 10, SSD1306_WHITE);

    display.display();
    delay(2000);
    display.clearDisplay();
  }

  void displaySensorData(String msg, char* data) {
    Serial.print(msg.c_str()); 
    Serial.println(data);

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(10,1);

    display.print(msg.c_str());

    // display.setTextColor(WHITE);
    display.setTextSize(1);
    display.setCursor(0,20);
    display.println(data); 

    display.display();
    delay(2000);
  };

  void drawMaple(void) {
    display.clearDisplay();

    display.drawBitmap(20, 10, logo_maple, 50, 40, 1);
    display.display();
    delay(1000);
  }

  void drawbitmap(void) {
    display.clearDisplay();

    display.drawBitmap(
      (display.width()  - LOGO_WIDTH ) / 2,
      (display.height() - LOGO_HEIGHT) / 2,
      logo_maple, LOGO_WIDTH, LOGO_HEIGHT, 1);
    display.display();
    delay(1000);
  }

};
#endif